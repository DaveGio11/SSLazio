@model SSLazio.Models.Biglietti

@{
    ViewBag.Title = "Create";
}

<div id="timer" style="display: none;">
    Tempo rimanente: <span id="countdownDisplay"></span>
</div>


<h2>Create</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Biglietti</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.IdUtente, "Email Utente", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.HiddenFor(model => model.IdUtente) <!-- Mantieni l'IdUtente nascosto, assegnalo lato server -->
                @User.Identity.Name <!-- Mostro il nome utente loggato -->
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Partita", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <span class="form-control" readonly="readonly">@ViewBag.NomePartita</span>
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Settore", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <span class="form-control" readonly="readonly">@ViewBag.NomeSettore</span>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Cognome, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Cognome, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Cognome, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DataNascita, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DataNascita, new { htmlAttributes = new { @class = "form-control", id = "dataNascita" } })
                @Html.ValidationMessageFor(model => model.DataNascita, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CodiceFiscale, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CodiceFiscale, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CodiceFiscale, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LuogoNascita, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LuogoNascita, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LuogoNascita, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Residenza, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Residenza, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Residenza, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="riduzioneDiv" style="display:none;">
            @Html.LabelFor(model => model.Riduzione, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Riduzione", new SelectList(new[] { "Intero" }), htmlAttributes: new { @class = "form-control", id = "riduzione" })
                @Html.ValidationMessageFor(model => model.Riduzione, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="riduzioneDivRidotto" style="display:none;">
            @Html.LabelFor(model => model.Riduzione, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Riduzione", new SelectList(new[] { "Ridotto" }), htmlAttributes: new { @class = "form-control", id = "riduzioneRidotto" })
                @Html.ValidationMessageFor(model => model.Riduzione, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Altri campi del form qui -->

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="button" class="BtnAcq" id="openPaymentModal" data-toggle="modal" data-target="#paymentModal">Paga</button>
            </div>
        </div>
    </div>

    <!-- Modal per il pagamento -->
    <div class="modal fade" id="paymentModal" tabindex="-1" aria-labelledby="paymentModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="paymentModalLabel">Inserisci Metodo di Pagamento</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="paymentForm">
                        <div class="form-group">
                            @Html.LabelFor(model => model.NumeroCarta, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.NumeroCarta, new { htmlAttributes = new { @class = "form-control", placeholder = "0000-0000-0000-0000", id = "NumeroCarta", maxlength = "19" } })
                                @Html.ValidationMessageFor(model => model.NumeroCarta, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Intestatario, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Intestatario, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Intestatario, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Scadenza, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Scadenza, new { htmlAttributes = new { @class = "form-control", placeholder = "00-00", id = "Scadenza", maxlength = "5" } })
                                @Html.ValidationMessageFor(model => model.Scadenza, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Cvc, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Cvc, new { htmlAttributes = new { @class = "form-control", placeholder = "000", maxlength = "3" } })
                                @Html.ValidationMessageFor(model => model.Cvc, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group d-none">
                            @Html.LabelFor(model => model.DataPagamento, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @{
                                    string dataPagamentoString = Model.DataPagamento.HasValue ? Model.DataPagamento.Value.ToString("dd/MM/yyyy") : "";
                                }
                                <input type="text" class="form-control" id="dataPagamento" name="DataPagamento" value="@dataPagamentoString" />
                                @Html.ValidationMessageFor(model => model.DataPagamento, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.EmailDestinatario, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.EmailDestinatario, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.EmailDestinatario, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Create" class="btn btn-default" />
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

}
<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(function () {
            $('#dataNascita').change(function () {
                var dataNascita = new Date($(this).val());
                var cutoffDate = new Date('2008-12-31'); // Data limite per PrezzoIntero

                if (dataNascita <= cutoffDate) {
                    $('#riduzioneDiv').show();
                    $('#riduzioneDivRidotto').hide();
                }
                if (dataNascita > cutoffDate) {
                    $('#riduzioneDivRidotto').show();
                    $('#riduzioneDiv').hide();
                }
            });

            $('#NumeroCarta').on('input', function () {
                var trimmed = $(this).val().replace(/\-/g, ''); // Rimuovi eventuali trattini
                if (trimmed.length > 0) {
                    trimmed = trimmed.match(new RegExp('.{1,4}', 'g')).join('-'); // Aggiungi trattini ogni 4 caratteri
                }
                $(this).val(trimmed);
            });

            $('#Scadenza').on('input', function () {
                var trimmed = $(this).val().replace(/\-/g, ''); // Rimuovi eventuali trattini
                if (trimmed.length > 0) {
                    trimmed = trimmed.slice(0, 2) + '-' + trimmed.slice(2); // Aggiungi il trattino dopo la seconda coppia di numeri
                }
                $(this).val(trimmed);
            });

            $(document).ready(function () {
                $("#openPaymentModal").click(function () {
                    $("#paymentModal").modal("show");
                });
            });

             $(document).ready(function () {
        var countdown = 600; // 600 secondi = 10 minuti
        var timerDisplay = $('#timer');

        function startTimer() {
            timerDisplay.show();
            var timerInterval = setInterval(function () {
                countdown--;
                var minutes = Math.floor(countdown / 60);
                var seconds = countdown % 60;
                var formattedTime = minutes.toString().padStart(2, '0') + ":" + seconds.toString().padStart(2, '0');
                $('#countdownDisplay').text(formattedTime);

                if (countdown <= 0) {
                    clearInterval(timerInterval);
                    window.location.href = '@Url.Action("Index", "Partite")'; // Reindirizza alla pagina Index di Partite
                }
            }, 1000); // 1000 millisecondi = 1 secondo
        }

        startTimer();
    });
        });
    </script>
}
